set(TARGET_NAME grapkimbo)


set(AUTOGEN_DISCLAIMER "/* WARNING: Autogenerated file, do not edit. All changes will be lost. */")
set(REPO_FOLDER ${PROJECT_SOURCE_DIR})
configure_file(build_info.h.in build_info.h @ONLY)


set(${TARGET_NAME}_HEADERS
    commons.h
    Configuration.h
    DebugUI.h
    Entities.h
    Game.h
    Input.h
    LevelStacks.h
    Logging.h
    Timer.h
    TopLevelStates.h
    Utilities.h

    Animation/AnimationStateMachine.h
    Animation/PlayerAnimation.h

    Components/AccelAndSpeed.h
    Components/AnimatedSprite.h
    Components/Body.h
    Components/CameraGuide.h
    Components/CameraLimits.h
    Components/CameraTag.h
    Components/Controllable.h
    Components/DelayDeletion.h
    Components/DistanceJoint.h
    Components/GrappleControl.h
    Components/Mass.h
    Components/PivotJoint.h
    Components/PlayerData.h
    Components/Position.h
    Components/RopeCreator.h
    Components/RopeSegment.h
    Components/ScreenPosition.h
    Components/SoundPlayer.h
    Components/Text.h
    Components/VisualOutline.h
    Components/VisualPolygon.h
    Components/VisualRectangle.h
    Components/VisualSprite.h
    Components/WeldJoint.h

    Components/Debug/DirectControlTag.h

    Context/Context.h
    Context/Localization.h
    Context/Resources.h

    Systems/CameraGuidedControl.h
    Systems/Control.h
    Systems/DelayDeleter.h
    Systems/GameRule.h
    Systems/Gravity.h
    Systems/GrappleCleanup.h
    Systems/GrappleInteractions.h
    Systems/GrappleJointCreator.h
    Systems/Gravity.h
    Systems/Hud.h
    Systems/LevelGeneration.h
    Systems/RenderBackground.h
    Systems/RenderWorld.h
    Systems/AccelSolver.h
    Systems/Physics.h
    Systems/RopeCreation.h
    Systems/SegmentStacker.h
    Systems/SoundSystem.h
    Systems/TransitionAnimationState.h

    Systems/Debug/DirectControl.h

    TestScenes/CollisionTest.h
    TestScenes/DistanceTest.h
    TestScenes/FrictionTest.h
    TestScenes/PivotTest.h
    TestScenes/SimpleCollisionTest.h
    TestScenes/SetPositionTest.h
    TestScenes/SceneChanger.h
    TestScenes/WeldTest.h

    Scenery/GameScene.h
    Scenery/MenuScene.h
    Scenery/RopeGame.h
    Scenery/SplashScene.h
    Scenery/StateMachine.h

    Utils/Camera.h
    Utils/CollisionBox.h
    Utils/CompositeTransition.h
    Utils/DrawDebugStuff.h
    Utils/Grapple.h
    Utils/HomogeneousTransformation.h
    Utils/MenuControls.h
    Utils/PhysicsMathUtilities.h
    Utils/PhysicsStructs.h
    Utils/Player.h
    Utils/RenderEffect.h
    Utils/RopeUtilities.h
    Utils/Shape.h
    Utils/TimeSystemsUpdater.h

    DebugGui/SceneGui.h
)

set(${TARGET_NAME}_SOURCES
    main.cpp

    Configuration.cpp
    DebugUI.cpp
    Entities.cpp
    Input.cpp
    LevelStacks.cpp
    Logging.cpp
    Timer.cpp
    TopLevelStates.cpp

    Animation/AnimationStateMachine.cpp

    Context/Localization.cpp

    Systems/CameraGuidedControl.cpp
    Systems/Control.cpp
    Systems/DelayDeleter.cpp
    Systems/GameRule.cpp
    Systems/Gravity.cpp
    Systems/GrappleCleanup.cpp
    Systems/GrappleInteractions.cpp
    Systems/GrappleJointCreator.cpp
    Systems/Hud.cpp
    Systems/LevelGeneration.cpp
    Systems/RenderBackground.cpp
    Systems/RenderWorld.cpp
    Systems/AccelSolver.cpp
    Systems/Physics.cpp
    Systems/RopeCreation.cpp
    Systems/SegmentStacker.cpp
    Systems/SoundSystem.cpp
    Systems/TransitionAnimationState.cpp

    Systems/Debug/DirectControl.cpp

    TestScenes/CollisionTest.cpp
    TestScenes/DistanceTest.cpp
    TestScenes/FrictionTest.cpp
    TestScenes/SimpleCollisionTest.cpp
    TestScenes/SetPositionTest.cpp
    TestScenes/PivotTest.cpp
    TestScenes/WeldTest.cpp

    Scenery/GameScene.cpp
    Scenery/MenuScene.cpp
    Scenery/RopeGame.cpp
    Scenery/SplashScene.cpp

    Utils/CollisionBox.cpp
    Utils/DrawDebugStuff.cpp
    Utils/PhysicsStructs.cpp
    Utils/RenderEffect.cpp
    Utils/RopeUtilities.cpp
    Utils/Shape.cpp
)

source_group(TREE ${CMAKE_CURRENT_LIST_DIR}
             FILES ${${TARGET_NAME}_HEADERS} ${${TARGET_NAME}_SOURCES}
)


find_package(Aunteater CONFIG REQUIRED COMPONENTS aunteater)
find_package(Graphics CONFIG REQUIRED COMPONENTS arte graphics resource)
find_package(Math CONFIG REQUIRED COMPONENTS math)
find_package(Websocket CONFIG REQUIRED COMPONENTS websocket)
find_package(Sounds CONFIG REQUIRED COMPONENTS sounds)

find_package(Boost REQUIRED COMPONENTS program_options)
find_package(glad REQUIRED)
find_package(imgui REQUIRED)
find_package(spdlog REQUIRED COMPONENTS spdlog)
find_package(OpenAL REQUIRED CONFIG)
find_package(Vorbis REQUIRED File CONFIG)
find_package(Ogg REQUIRED CONFIG)


add_executable(${TARGET_NAME}
    ${${TARGET_NAME}_SOURCES}
    ${${TARGET_NAME}_HEADERS}

    ${CMAKE_CURRENT_BINARY_DIR}/build_info.h

    ${PROJECT_BINARY_DIR}/imgui_backends/imgui_impl_glfw.cpp
    ${PROJECT_BINARY_DIR}/imgui_backends/imgui_impl_opengl3.cpp
    ${PROJECT_BINARY_DIR}/imgui_backends/imgui_impl_glfw.h
    ${PROJECT_BINARY_DIR}/imgui_backends/imgui_impl_opengl3.h
    ${PROJECT_BINARY_DIR}/imgui_backends/imgui_impl_opengl3_loader.h
)

if(NOT CMAKE_SYSTEM_NAME STREQUAL "Windows")
    target_compile_options(${TARGET_NAME}
        PRIVATE "-O3")
    target_compile_options(${TARGET_NAME}
        PRIVATE "-Wall" "-Wextra" "-fsanitize=address" "-fsanitize=undefined")
    target_link_options(${TARGET_NAME}
        PRIVATE "-fsanitize=address" "-fsanitize=undefined")
endif()

target_compile_definitions(${TARGET_NAME} PRIVATE KIMBO_DEBUG)

target_include_directories(${TARGET_NAME}
    PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}
            ${PROJECT_BINARY_DIR}/imgui_backends
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}> # For generated header
)

target_link_libraries(${TARGET_NAME}
    PRIVATE
        ad::arte
        ad::aunteater
        ad::graphics
        ad::math
        ad::resource
        ad::websocket
        ad::sounds

        Boost::program_options
        glad::glad
        imgui::imgui
        spdlog::spdlog
        OpenAL::OpenAL
        Vorbis::vorbisfile
)


set_target_properties(${TARGET_NAME} PROPERTIES
                      VERSION "${${PROJECT_NAME}_VERSION}"
)


##
## Install
##

install(TARGETS ${TARGET_NAME})
